Invoke-WebRequest -Uri "10.50.34.170:8000/psexam.exe" -Outfile C:\Users\student\downloads\psexam.exe
Invoke-WebRequest -Uri "10.50.34.170:8000/exam.ps1" -Outfile C:\Users\student\downloads\exam.ps1
#---- Find Cmdlets
Update-Help
Get-Process
get-help *process*
Get-Service
Write-Host
Write-Output
New-Variable
Set-Variable
Get-Variable
Remove-Variable
Get-Command or Get-Alias
Read-Host

#---- Running Cmdlets
Get-Process
Get-Process -name s*
get-alias -name <>  #[gal -> get-alias | dir -> get-childitem | echo -> write-output | ? -> Where-object | % -> foreach-object | ft -> format-table]
Show-NetFirewallRule
set-alias gh Get-Help

#---- Variables
$var1 = Get-Random -Minimum 25 -Maximum 50
$var2 = Get-Random -Minimum 1 -Maximum 10
$sum = $var1 + $var2
$sub = $var1 - $var2
$prod = $var1 * $var2
$quo = $var1 / $var2
"$var1 + $var2 = $sum"
"$var1 - $var2 = $sum"
"$var1 * $var2 = $sum"
"$var1 / $var2 = $sum"
****  "{0} + {1} = {2}" -f 5, $var1, $sum

#---- Reverse Arrays
$strt = Get-Random -Minimum -10 -Maximum 0
$nd = Get-Random -Minimum 1 -Maximum 20
$myarr = "$strt".."$nd"
$revarr = "$nd".."$strt" or [myarr]::Reverse($myarr)

#---- Arrays and Hash Tables
$employee1 = [ordered]@{First="Mary";Last="Hopper";ID="001";Job="Software Developer"}
$employee2 = [ordered]@{First="John";Last="Williams";ID="002";Job="Web Developer"}
$employee1.Username = "mhopper001"
$employee2.Username = "jWilliams002"
$employee1.Job = "Software Lead"
$employee3 = [ordered]@{First="Alex";Last="Moran";ID="003";Job="Software Developer";Username="aMoran003"}
$employee1.Status = "Management"
$employee2.Status = "Intermediate"
$employee3.Status = "Entry Level"

#---- The pipeline
ps | Select name, StartTime | sort StartTime | select -first 1 -last 1
(get-date).DayOfWeek)
get-date | Select dayofweek
get-hotfix | select name, installedon, HotfixID, description | sort Description | Format-Table Installedon, HotFixID, description

#---- Custom Object
$Custm = [PSCustomObject]@{
    "ComputerName" = (Get-WmiObject Win32_ComputerSystem | Select Name).name
    "OperatingSystemm" = "Microsoft Windows 10"
    "Version" = (Get-WmiObject Win32_OperatingSystem | Select Version).version
    "Manufacturer" = (Get-WmiObject Win32_ComputerSystem | Select Manufacturer).manufacturer
    "Disks" = Get-WmiObject Win32_LogicalDisk
}

#---- Comparision and Condition
$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$pattern = '[A-Za-z]{2}\d{2,5}'
$line1,$line | %{
    if ($_ -match $pattern) {Write $matches[0]": $_"}
    else {Write "No Model number found..."}
}

#---- Looping and Iteration
$Pslst = @((notepad.exe), (microsoftedge), (mspaint)) | %{($_)}
ps notepad
ps msedge
ps mspaint
ps notepad | select -ExpandProperty id | %{kill $_}
ps msedge | select -ExpandProperty id | %{kill $_}
ps mspaint | select -ExpandProperty id | %{kill $_}

$Pslst = @((notepad.exe), (microsoftedge), (mspaint)) | %{($_)}
ps notepad
ps msedge
ps mspaint
touch procs.txt
ps notepad | select -ExpandProperty id | ac procs.txt
ps msedge | select -ExpandProperty id | ac procs.txt
ps mspaint | select -ExpandProperty id | ac procs.txt
gc procs.txt | %{kill $_}
del procs.txt

#$Pslst = @((notepad.exe), (microsoftedge), (mspaint)) | %{($_)}
ps notepad | ft Id, name, starttime, TotalProcessorTime, VirtualMemorySize, WorkingSet64
ps msedge | ft Id, name, starttime, TotalProcessorTime, VirtualMemorySize, WorkingSet64
ps mspaint | ft Id, name, starttime, TotalProcessorTime, VirtualMemorySize, WorkingSet64

#---- Functions
function Get-OrdinalDate(){$today = Get-Date; $Jan1 = Get-Date 1/1; $Ordinal = ($today - $Jan1).days +1; $year = (Get-Date).Year;Write "$year-$Ordinal"}
function Get-SquareNum(){param([Parameter(Mandatory=$true)][Double]$n);return $n * $n}
function Get-Product(){param([Parameter(Mandatory=$true)][Double]$1,[Parameter(Mandatory=$true)][Double]$2,[Parameter(Mandatory=$true)][Double]$3);
return $1 * $2 * $3}
function Pythagorean(){ param([Parameter(Mandatory=$true)][Double]$a,[Parameter(Mandatory=$true)][Double]$b)
$c = [math]::Sqrt(($a*$a)+($b*$b)); return $c}
function Angles(){
    param([Parameter(Mandatory=$true)][Double]$a,[Parameter(Mandatory=$true)][Double]$b);$missing = (180 - $a) - $b;return $missing}
function Weight(){ 
    param(
        [Parameter(Mandatory=$true)] $FN,
        [Parameter(Mandatory=$true)] $LN,
        [Parameter(Mandatory=$true)] $Age,
        [Parameter(Mandatory=$true)] $lbs
    )
    $Kg = "{0:n0}" -f ($lbs/2.2) 
    $tble = [ordered]@{First= $FN; Last= $LN; Age= $Age; Weight= $Kg;}
    $tble
}
Function Get-Multisum(){
    param(
           [Parameter(Mandatory=$true)][Array]$arr,
           [Parameter(Mandatory=$true)][Double]$int
    )
    BEGIN{}
    PROCESS{
        ForEach($item in $arr){
            if($item -ne $int){$sum+=[int32]$item}
        }
    }
    END{return $sum}
}
Function Get-LongestName(){
    param(
            [Parameter(Mandatory=$true)][String]$1,
            [Parameter(Mandatory=$true)][String]$2,
            [Parameter(Mandatory=$true)][String]$3
        )
    BEGIN { $lst = @(($1 + ": "+ ($1).Length),($2 + ": " + ($2).Length),($3 + ": " + ($3).Length)) }
    PROCESS { $lst=$lst | sort -Descending { [int] ( $_ | Select-String -Pattern \d+ ).Matches[0].Value } }
    END { return $lst }
}
function Get-NetInfo(){
    $ip = (ipconfig | Select-String -Pattern "ipv4") -replace ".* "
    $subnet = (ipconfig | Select-String -Pattern "subnet") -replace ".* "
    $default = (ipconfig | Select-String -Pattern "default") -replace ".* "
    "IP : $ip"
    "Subnet : $subnet"
    "Gateway : $default"
}
function Get-URLs($file){
    $pattern = "[A-Za-z]+\.[A-Za-z]+\.[A-Za-z]+"
    ForEach($line in (Get-Content dns.txt)){ if($line -match $pattern){ $matches[0] | Add-Content temp.txt}}
    Get-Content temp.txt | sort | Group-Object | Select-Object -Property name,count
}
